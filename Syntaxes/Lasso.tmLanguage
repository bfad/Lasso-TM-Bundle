<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>lasso</string>
		<string>las</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(?x)(
		&lt;\?(?i:=|lasso(script)?)\b
		|(?i:if|inline|iterate|loop|match|protect|records|resultset|rows|while)(\(|:).*(;|$)
		|\/\*(?!.*\*\/)
	    |\{\s*$
	    |\{\^\s*$
		)</string>
	<key>foldingStopMarker</key>
	<string>(?x)(
		\s*\?&gt;
		|/(?i:if|inline|iterate|loop|match|protect|records|resultset|rows|while)(;|$)
		|^(?!.*?\/\*).*?\*\/
		|^\s*\}
		|^\s*\^\}
		)</string>
	<key>name</key>
	<string>Lasso</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>(?i)\b(abort|case|define|else|if|inline|iterate|loop|loop_abort|loop_continue|loop_count|loop_key|loop_value|match|protect|records|resultset|rows|while)\b</string>
			<key>name</key>
			<string>keyword.control.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(library|include)(_once)?\b</string>
			<key>name</key>
			<string>keyword.control.import.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(public|private|protected|data|type|thread|trait|import|provide|require)\b</string>
			<key>name</key>
			<string>keyword.descriptors.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)\b(array|action_params?|boolean|bytes|capture|curl|currency|database_registry|date|dateandtime|decimal|delve|dir|duration|eacher|file|generateForEachKeyed|generateForEachUnKeyed|generateSeries|inline_type|integer|list|list_node|literal|local|locale|map|map_node
			|net_tcp|net_tcpssl|net_udp|net_udppacket|object|pair|pairup|paramdesc|pdf_barcode|pdf_chunk|pdf_color|pdf_doc|pdf_font|pdf_hyphenator|pdf_image|pdf_list|pdf_paragraph|pdf_phrase|pdf_read|pdf_table|pdf_text|pdf_typebase
			|percent|queriable_select|queriable_groupBy|queriable_grouping|queriable_groupJoin|queriable_join|queriable_orderBy|queriable_orderByDescending|queriable_selectMany|queriable_skip|queriable_take|queriable_thenBy|queriable_thenByDescending|queriable_where
			|queue|repeat|serialization_element|serialization_object_identity_compare|serialization_reader|serialization_writer|serialization_writer_ref|serialization_writer_standin|set|scientific
			|sqlite_column|sqlite_columnScanner|sqlite_currentrow|sqlite_db|sqlite_expressionGenerator|sqlite_query_stat|sqlite_results|sqlite_table|stack|staticarray|string|tie|timeonly|tree_base|tree_node|tree_nullNode|user_registry|var(iable)?|xml_element|xml_namednodemap_attr|xml_node|xml_nodelist|zip|zip_file)\b</string>
			<key>name</key>
			<string>storage.type.lasso</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This is for the ljapi types</string>
			<key>match</key>
			<string>(?i)\b(jchar|jchararray|jbyte|jbytearray|jfloat|jint|jshort)\b</string>
			<key>name</key>
			<string>storage.type.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?i:void|null|true|false)\b</string>
			<key>name</key>
			<string>constant.language.lasso</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.lasso</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.lasso</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>string.quoted.single.lasso</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.lasso</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>end</key>
			<string>`</string>
			<key>name</key>
			<string>string.quoted.backtick.lasso</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*\*(?:#@\+)?\s*$</string>
			<key>comment</key>
			<string>This now only highlights a docblock if the first line contains only /**
						- this is to stop highlighting everything as invalid when people do comment banners with /******** ...
						- Now matches /**#@+ too - used for docblock templates: http://manual.phpdoc.org/HTMLframesConverter/default/phpDocumentor/tutorial_phpDocumentor.howto.pkg.html#basics.docblocktemplate</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.documentation.lasso</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(//).*?($\n?|(?=\?&gt;))</string>
			<key>name</key>
			<string>comment.line.double-slash.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$[a-zA-Z_][a-zA-Z0-9_.]*</string>
			<key>name</key>
			<string>variable.other.thread.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>#[a-zA-Z_][a-zA-Z0-9_.]*</string>
			<key>name</key>
			<string>variable.other.local.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\s#1\s|\b(?i:self)\b)</string>
			<key>name</key>
			<string>variable.language.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\-\-|\+\+)</string>
			<key>name</key>
			<string>keyword.operator.increment-decrement.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\-|\+|\*|/|%)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)(!|&amp;&amp;|\|\||\?|\bnot\b|\band\b|\bor\b)</string>
			<key>name</key>
			<string>keyword.operator.logical.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(=|:=|\+=|\-=|/=|%=)</string>
			<key>name</key>
			<string>keyword.operator.assignment.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(===|==|!==|!=|&lt;=|&gt;=|&lt;|&gt;|&gt;&gt;|!&gt;&gt;)</string>
			<key>name</key>
			<string>keyword.operator.comparison.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(-&gt;|&amp;)</string>
			<key>name</key>
			<string>keyword.operator.target.lasso</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(=&gt;)</string>
			<key>name</key>
			<string>keyword.operator.association.lasso</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.lasso</string>
	<key>uuid</key>
	<string>ED5E138D-C4A8-4F7A-AAC6-74C315471D00</string>
</dict>
</plist>
